<!DOCTYPE html>
<!-- This website template was created by: ThankGod Ofurum, 10/9/2016 -->
<html lang="en">
<head>
	<title>Final Project Writeup</title>
	<style type="text/css">
		p{
			text-align: justify;
			font-family: "Times New Roman", Times, serif
		}
		div{
			width: 60%;
		}
	</style>
</head>

<body>
	<main>
		<h2 style="font-weight: bold">Name: ThankGod Ofurum</h2>
		<h3 style="font-weight: bold">Class: 2270</h3>
		<div>
			<p>This final project required that the game of hangman be programmed in JavaScript and that, during runtime, should the player choose a value to guess, the page be moved to a new address along with the values from the previous page, through the address value. Additional requirement was that CSS styles be applied to the webpage to make it more attractive and new images could be used to enhance the visual aspect of the website.</p>
			<p>To begin, I understood it best to code all the elements required for the project in JavaScript rather than in HTML. I then just had to load the entire project when the page was opened with the on-load attribute in the body tag. I then knew that the very first JavaScript function was to have two alternatives: one for when the webpage is loaded for the very first time and the other for when the webpage has been loaded multiple times, and to keep track of this I learnt that it was optimal to use the existence of the values stored in the address bar of the webpage as a conditional for these alternatives. When the program begins for the first time a word to be guessed is loaded from the chance.js file to the string var, and in my case, I decided to use US countries and territories as the words to be guessed.</p>
			<p>Next buttons are created based on all the letters of the alphabets and an empty array is also created to match the size of the word to be guessed. Following this we create the on-click event-handler for each button so that whenever it’s clicked on the function which checks the validity of the button value in respect to the guess word is called. Once this is done the empty array is updated if the guess was correct and a counter is activated which increments if the guess was wrong or stays the same if the guess was correct. Then the address bar for the webpage is called for the following values: clicks, for the current webpage; array, for the current correct choices so far; choice for the letter chosen, button clicked, for the turn. To retain values such as guess word and alphabets across multiple pages, local storage is used to set and to get these words as needed in string format.</p>
			<p>Following this the webpage is reloaded and the on-load function of the body tag is called again, but this time the second alternative of the opening function is called due to the extra values on the address bar. These values are extracted and used as follows: clicks is used to keep count of the current turn in the game; array is used to check if all the correct letters have been chosen, thus terminating the game; choice is used to update the alphabet choice in order to restrict the choice of buttons users are allowed to enter to prevent multiple entries of same letter. Counter is also uploaded from local storage and used to update the game image based on player’s choice-either right or wrong. Therefore, the process repeats itself until either 14 failed attempts are made or the array is populated with correct letters to form the guess word.</p>
			<p>Much of the CSS involved positioning the images with the position keyword and setting the z-index to allow the overlaying of images. Also, most of the styles involved background-color and text color, including text font and weight. Width and height was also a focus to prevent elements from overlapping based on window size, and float was used to prevent overlapping of images and elements.<b> These codes can be viewed by following the link below.</p>
		</div>
	</main>
	<footer>
		<ul>
			<li><a href="FinalProject">HTML souce code</a></li>
			<li><a href="CSS/finalProjectCSS.css">CSS souce code</a></li>
		</ul>
	</footer>
	<p></p>
</body>